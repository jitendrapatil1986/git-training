(function (e) { if (typeof define === "function" && define.amd) { define(["knockout", "jquery"], e) } else { e(window.ko, window.jQuery) } })(function (e, i) { e.bindingHandlers.editable = { init: function (n, t, a, s, r) { var o = i(n), l = t(), u = a(), f = u.editableOptions || {}; f.value = e.utils.unwrapObservable(l); if (!f.name) { i.each(r.$data, function (e, i) { if (i == l) { f.name = e; return false } }) } if (!f.validate && l.isValid) { f.validate = function (i) { var n = l(); l(i); var t = l.isValid() ? null : e.utils.unwrapObservable(l.error); l(n); return t } } if ((f.type === "select" || f.type === "checklist" || f.type === "typeahead") && !f.source && f.options) { if (f.optionsCaption) f.prepend = f.optionsCaption; function v(e, i, n) { var t = typeof i; if (t == "function") return i(e); else if (t == "string") return e[i]; else return n } f.source = function () { return e.utils.arrayMap(e.utils.unwrapObservable(f.options), function (i) { var n = v(i, f.optionsValue, i); var t = v(i, f.optionsText, t); return { value: e.utils.unwrapObservable(n), text: e.utils.unwrapObservable(t) } }) } } if (f.visible && e.isObservable(f.visible)) { f.toggle = "manual" } var b = o.editable(f); if (e.isObservable(l)) { b.on("save.ko", function (e, i) { l(i.newValue) }) } if (f.save) { b.on("save", f.save) } e.computed({ read: function () { var i = e.utils.unwrapObservable(t()); if (i === null) i = ""; b.editable("setValue", i, true) }, owner: this, disposeWhenNodeIsRemoved: n }); if (f.visible && e.isObservable(f.visible)) { e.computed({ read: function () { var i = e.utils.unwrapObservable(f.visible()); if (i) b.editable("show") }, owner: this, disposeWhenNodeIsRemoved: n }); b.on("hidden.ko", function (e, i) { f.visible(false) }) } } } });