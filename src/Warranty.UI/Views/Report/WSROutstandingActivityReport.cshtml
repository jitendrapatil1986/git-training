@model Warranty.Core.Features.Report.WSROpenActivity.WSROpenActivityModel
@using Warranty.Core.Enumerations
@using Warranty.Core.Extensions

<h2>Outstanding Activity Report</h2>

@if (!User.IsInRole(UserRoles.WarrantyServiceRepresentative))
{
    <div class="panel panel-default no-print">
        <div class="panel-heading">
            <div id="wsrLoadingReportFilter">
                <div class="no-bottom-padding">
                    <div class="row">
                        <div class="col-md-12">
                            @using (Html.BeginForm("WSROutstandingActivityReport", "Report", FormMethod.Post, new { @class = "form-inline" }))
                            {
                                @Html.ValidationSummary()
                                <div class="form-group">
                                    @Html.DropDownListFor(m => m.DivisionId, Model.Divisions.Select(division => new SelectListItem
                                    {
                                        Text = division.Value,
                                        Value = division.Key.ToString()
                                    }),
                                        "Division - ALL",
                                        new {@class = "form-control text-capitalize"})
                                </div>
                                <div class="form-group">
                                    @Html.DropDownListFor(m => m.ProjectId, Model.Projects.Select(project => new SelectListItem
                                    {
                                        Text = project.Value,
                                        Value = project.Key.ToString()
                                    }),
                                        "Project - ALL",
                                        new {@class = "form-control text-capitalize"})
                                </div>
                                <div class="form-group">
                                    @Html.DropDownListFor(m => m.TeamMemberId, Model.TeamMembers.Select(teamMember => new SelectListItem
                                    {
                                        Text = teamMember.EmployeeName,
                                        Value = teamMember.EmployeeId.ToString()
                                    }),
                                        "Team Member - ALL",
                                        new { @class = "form-control text-capitalize" })
                                </div>
                                <div class="form-group">
                                    <input type="submit" class="btn btn-primary" value="Run Report" />
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@if (Model.HasResults)
{
    <h3>Report Summary</h3>

    <div class="row">
        <div class="col-lg-6">
            <table class="table table-striped">
                <tr>
                    <td><b>Team Members</b></td>
                    <td>@Model.OpenActivities.Count()</td>
                </tr>
                <tr>
                    <td><b>Outstanding TODOs</b></td>
                    <td>@Model.OpenActivities.Sum(a => a.OpenTasks.Count())</td>
                </tr>
                <tr>
                    <td><b>Oldest Outstanding TODO</b></td>
                    <td>@Model.OpenActivities.Max(a => a.OldestOpenTask).Days days</td>
                </tr>
                <tr>
                    <td><b>Open Service Calls</b></td>
                    <td>@Model.OpenActivities.Sum(a => a.ServiceCalls.Count())</td>
                </tr>
            </table>
        </div>
    </div>

    <div class="float-right-non-xs-screen">
        <a class="btn btn-default" href="#" role="button" id="expandAll">
            <span class="glyphicon glyphicon-plus"></span>
            <span class="text">Expand All</span>
        </a>
    </div>

    <div class="clearfix"></div>
    <div class="margin-top-10"></div>

    foreach (var activity in Model.OpenActivities)
    {
    <div class="panel panel-primary" style="page-break-after: always">
        <div class="panel-heading">
            <a name="@activity.EmployeeName"></a><span class="text-larger"><strong>@activity.EmployeeName</strong></span><span class="badge margin-left-15">@activity.OpenTasks.Count() outstanding tasks</span><span class="badge margin-left-15">@activity.ServiceCalls.Count() outstanding calls</span>
            <div class="float-right-non-xs-screen">
                <a class="btn btn-default btn-xs activityToggle" href="#@activity.EmployeeName" role="button">
                    <span class="glyphicon glyphicon-plus"></span>
                </a>    
            </div>
        </div>
        <div class="panel-body">
            <div id="content-@activity.Anchor" class="activityContent hidden">
                <h4>Outstanding Tasks <span class="badge">@activity.OpenTasks.Count()</span></h4>
                <div class="row" style="page-break-after: always">
                @foreach (var taskType in activity.OpenTasks.Where(t => t.JobNumber != null).GroupBy(t => t.TaskType.Stage).OrderBy(t => t.Key))
                {
                    if (taskType.Any())
                    {
                        <div class="col-xs-4">
                            <strong>Jobs awaiting @taskType.FirstOrDefault().TaskType.ReportDisplay</strong>
                            <ul>
                            @foreach (var task in taskType.OrderByDescending(t => t.DaysOutstanding))
                            {
                                <li>@Html.ActionLink(task.JobNumber, "JobSummary", "Job", new { id = task.ReferenceId }, new { target = "_blank" }) - @task.DaysOutstanding.Days days outstanding</li>
                            }
                            </ul>
                        </div>    
                    }
                }
                </div>

                @foreach (var communityGroup in @activity.ServiceCalls.GroupBy(sc => sc.CommunityName))
                {
                    <h4>@communityGroup.Key - Outstanding Calls</h4>
                    var communityId = communityGroup.Select(c => c.CommunityId).FirstOrDefault();
                    var communityTasks = activity.OpenTasks.Where(t => t.ReferenceId == communityId);
                    if (communityTasks.Any())
                    {
                        <ul class="list-group no-margin">
                            @foreach (var task in communityTasks)
                            {
                                <li class="list-group-item">@task.Description</li>
                            }
                        </ul>
                    }
                    <table class="table table-striped">
                        <thead>
                        <tr>
                            <td><b>Job Number</b></td>
                            <td><b>Homeowner</b></td>
                            <td><b>Address</b></td>
                            <td><b>Phone</b></td>
                            <td><b>Days Outstanding</b></td>
                        </tr>
                        </thead>
                        @foreach (var serviceCall in communityGroup.OrderByDescending(sc => Math.Abs((DateTime.Today - sc.CreatedDate.Date).TotalDays)))
                        {
                            <tr>
                                <td>@Html.ActionLink(serviceCall.JobNumber, "JobSummary", "Job", new { id = serviceCall.JobId }, new { target = "_blank" })</td>
                                <td>@serviceCall.HomeownerName</td>
                                <td>@serviceCall.Address</td>
                                <td>@serviceCall.HomePhone.ToPhoneNumberWithExtension()</td>
                                @if (serviceCall.IsSpecialProject)
                                {
                                    <td>Special Project</td>
                                }
                                else
                                {
                                    <td>@(Math.Abs((DateTime.Today - serviceCall.CreatedDate.Date).TotalDays)) days</td>
                                }
                            </tr>
                            <tr>
                                <td colspan="5">
                                    <h6><strong>Line Item Problem Code and Description</strong></h6>
                                    <ul>
                                        @foreach (var line in serviceCall.ServiceCallLines)
                                        {
                                            <li>@line.ProblemCode - @line.ProblemDescription</li>
                                        }
                                    </ul>
                                    @if (serviceCall.ServiceCallNotes.Any())
                                    {
                                        <h6><strong>Notes</strong></h6>
                                        <ul>
                                            @foreach (var note in serviceCall.ServiceCallNotes)
                                            {
                                                <li>@note.Note</li>
                                            }
                                        </ul>
                                    }
                                </td>
                            </tr>
                        }
                    </table>
                }
            </div>
        </div>
    </div>
    }
}
else
{
    <p><em>No entries match report criteria</em></p>
}